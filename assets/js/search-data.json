{
  
    
        "post0": {
            "title": "Entity Extraction (NER) - Training and Inference using Transformers - Part 3",
            "content": "In the previous post we trained the NER model on a kaggle dataset. . In this post we will train an Entity Extraction model on a MIT restaurant Intent dataset. These dataset is helpful for slot filling in the chatbot conversations. The model will be able to recognize following entities . Rating Dish Location . from google.colab import drive drive.mount(&#39;/content/drive&#39;) . Mounted at /content/drive . !pip install git+https://github.com/huggingface/transformers.git !pip install seqeval !pip install conllu . Download the Restaurant Intent Dataset . !wget https://groups.csail.mit.edu/sls/downloads/restaurant/restauranttrain.bio !wget https://groups.csail.mit.edu/sls/downloads/restaurant/restauranttest.bio . The data is present in the following format . O a B-Rating four I-Rating star O restaurant B-Location with I-Location a B-Amenity bar . . Convert datafile to conllu input format for processing with NER Task Class . Reverse the tag and the column column in both the test and train files. . | Replace the tab seperator to space. . | Change the example seperator to newline . | !awk &#39;{print $2,$1}&#39; restauranttest.bio &gt; &quot;/content/drive/My Drive/transformers-ner/mit-restaurant-data/test.txt&quot; !awk &#39;{print $2,$1}&#39; restauranttrain.bio &gt; &quot;/content/drive/My Drive/transformers-ner/mit-restaurant-data/train.txt&quot; !sed -i &#39;s/ t/ /g&#39; &#39;/content/drive/My Drive/transformers-ner/mit-restaurant-data/test.txt&#39; !sed -i &#39;s/^ $/ n/g&#39; &#39;/content/drive/My Drive/transformers-ner/mit-restaurant-data/test.txt&#39; !sed -i &#39;s/ t/ /g&#39; &#39;/content/drive/My Drive/transformers-ner/mit-restaurant-data/train.txt&#39; !sed -i &#39;s/^ $/ n/g&#39; &#39;/content/drive/My Drive/transformers-ner/mit-restaurant-data/train.txt&#39; . import pandas as pd df = pd.read_csv(&#39;/content/drive/My Drive/transformers-ner/mit-restaurant-data/train.txt&#39;,sep=&#39; &#39;, header=None) . with open(&#39;/content/drive/My Drive/transformers-ner/mit-restaurant-data/labels.txt&#39;,&#39;w&#39;) as fout: for tag in df[1].unique(): fout.write(tag+&#39; n&#39;) . !wget https://raw.githubusercontent.com/huggingface/transformers/master/examples/token-classification/utils_ner.py !wget https://raw.githubusercontent.com/huggingface/transformers/master/examples/token-classification/run_ner.py !wget https://raw.githubusercontent.com/huggingface/transformers/master/examples/token-classification/tasks.py . Run the Training Code . !python run_ner.py --model_name_or_path &#39;roberta-base&#39; --data_dir &#39;/content/drive/My Drive/transformers-ner/mit-restaurant-data/&#39; --output_dir &#39;restaurant-model&#39; --max_seq_length &#39;128&#39; --num_train_epochs 3 --per_device_train_batch_size 8 --save_steps 1000000 --seed 16 --do_train --do_predict --overwrite_output_dir --labels &quot;/content/drive/My Drive/transformers-ner/mit-restaurant-data/labels.txt&quot; --fp16 . The model training achieves an accuracy score of 91% on the test dataset. . eval_loss = 0.29688322173849724 eval_accuracy_score = 0.9196127946127947 eval_precision = 0.7854288349216109 eval_recall = 0.8108536972389717 eval_f1 = 0.7979387882573391 . Model Prediction . Run the prediction using the pipeline class . from transformers import pipeline model_name = &#39;/content/restaurant-model&#39; nlp = pipeline(task=&quot;ner&quot;, model=model_name, tokenizer=model_name, framework=&quot;pt&quot;,grouped_entities=True) . sequence =[&quot;&quot;&quot;how many 5 star restaurants are near me.&quot;&quot;&quot;,&quot;Which restaurant in Downtown serves best Momos?&quot;] nlp(sequence) . [[{&#39;entity_group&#39;: &#39;B-Rating&#39;, &#39;score&#39;: 0.9906011819839478, &#39;word&#39;: &#39; 5 star&#39;}, {&#39;entity_group&#39;: &#39;B-Location&#39;, &#39;score&#39;: 0.927771806716919, &#39;word&#39;: &#39; near me&#39;}], [{&#39;entity_group&#39;: &#39;B-Location&#39;, &#39;score&#39;: 0.6126553416252136, &#39;word&#39;: &#39; in Downtown&#39;}, {&#39;entity_group&#39;: &#39;B-Rating&#39;, &#39;score&#39;: 0.9742729663848877, &#39;word&#39;: &#39; best&#39;}, {&#39;entity_group&#39;: &#39;B-Dish&#39;, &#39;score&#39;: 0.990350604057312, &#39;word&#39;: &#39; Momos&#39;}]] .",
            "url": "http://forgetfulcrow.com/nlp/token%20classification/2020/09/20/_09_20_Entity_Extraction_Transformers_Part_3.html",
            "relUrl": "/nlp/token%20classification/2020/09/20/_09_20_Entity_Extraction_Transformers_Part_3.html",
            "date": " • Sep 20, 2020"
        }
        
    
  
    
        ,"post1": {
            "title": "Entity Extraction (NER) - Training and Inference using Transformers - Part 2",
            "content": "Problem Statement . In the Part-1, we talked about how to use the pretrained language model, Tokenizer and TokenClassification model. . In this post we will train an NER model using GMB(Groningen Meaning Bank) corpus annotated dataset. The dataset is available on the Kaggle. It has annotations for following entities . geo = Geographical Entity org = Organization per = Person gpe = Geopolitical Entity tim = Time indicator art = Artifact eve = Event nat = Natural Phenomenon . The trained NER model will be able to recognize entities like in following examples . . Fine Tuning Token Classification Model . Steps for Finetuning TC Model . Step 1. Dataset - Get labelled dataset for training and testing. For token classification, we need word level labels like following . The O | battery Aspect | of O | the O | speaker O | is O | very Sentiment | poor Sentiment | . We need train.txt, test.txt and labels.txt file to finetune the model, and to verify the performance of the model. . train.txt/test.txt - word and corresponding label per line and a blank line between each example. . labels.txt - list of unique tags that we have labelled in the train.txt and test.txt . Step 2. If the data is in any other format, we have to either convert it into this format, or write a new Task class and implement the methods of TokenClassificationTask . For this example, we will use the Task class NER in the tasks.py file. This will prepare the list of InputExample . class InputExample: &quot;&quot;&quot; A single training/test example for token classification. Args: guid: Unique id for the example. words: list. The words of the sequence. labels: (Optional) list. The labels for each word of the sequence. This should be specified for train and dev examples, but not for test examples. &quot;&quot;&quot; guid: str words: List[str] labels: Optional[List[str]] . Step 3. NER class extends the TokenClassificationTask class which has a method convert_examples_to_features to convert list of example in to input features . class InputFeatures: &quot;&quot;&quot; A single set of features of data. Property names are the same names as the corresponding inputs to a model. &quot;&quot;&quot; input_ids: List[int] attention_mask: List[int] token_type_ids: Optional[List[int]] = None label_ids: Optional[List[int]] = None . This method convert_examples_to_features uses the Tokenizer class to convert InputExample into InputFeature. In the Part-1 we discussed about the Tokenizer and how to prepate input for the model. . Step 4. Convert InputFeatures into Pytorch Dataset. The utils_ner.py has a function to convert InputFeatures into Dataset required for training. . Step 5. Call the Trainer class in run_ner.py which trains the model and evaluates the model. . Installation . Install the latest transformers library . !pip install git+https://github.com/huggingface/transformers.git !pip install seqeval !pip install conllu . from google.colab import drive drive.mount(&#39;/content/drive&#39;) . Mounted at /content/drive . Prepare the Training Data . Download the dataset from https://www.kaggle.com/abhinavwalia95/entity-annotated-corpus . download the file new_dataset.csv . Let&#39;s load the dataset in pandas dataframe and look at the data . import pandas as pd data_path = &#39;/content/drive/My Drive/transformers-ner/ner_dataset.csv&#39; df = pd.read_csv(data_path, encoding=&quot;latin-1&quot;) # fille the empty Sentence# with the previous available value df.loc[:, &quot;Sentence #&quot;] = df[&quot;Sentence #&quot;].fillna(method=&quot;ffill&quot;) df.head() . Sentence # Word POS Tag . 0 Sentence: 1 | Thousands | NNS | O | . 1 Sentence: 1 | of | IN | O | . 2 Sentence: 1 | demonstrators | NNS | O | . 3 Sentence: 1 | have | VBP | O | . 4 Sentence: 1 | marched | VBN | O | . sentences = df.groupby(&quot;Sentence #&quot;)[&quot;Word&quot;].apply(list).values tags = df.groupby(&quot;Sentence #&quot;)[&quot;Tag&quot;].apply(list).values . print(sentences[0]) print(tags[0]) . [&#39;Thousands&#39;, &#39;of&#39;, &#39;demonstrators&#39;, &#39;have&#39;, &#39;marched&#39;, &#39;through&#39;, &#39;London&#39;, &#39;to&#39;, &#39;protest&#39;, &#39;the&#39;, &#39;war&#39;, &#39;in&#39;, &#39;Iraq&#39;, &#39;and&#39;, &#39;demand&#39;, &#39;the&#39;, &#39;withdrawal&#39;, &#39;of&#39;, &#39;British&#39;, &#39;troops&#39;, &#39;from&#39;, &#39;that&#39;, &#39;country&#39;, &#39;.&#39;] [&#39;O&#39;, &#39;O&#39;, &#39;O&#39;, &#39;O&#39;, &#39;O&#39;, &#39;O&#39;, &#39;B-geo&#39;, &#39;O&#39;, &#39;O&#39;, &#39;O&#39;, &#39;O&#39;, &#39;O&#39;, &#39;B-geo&#39;, &#39;O&#39;, &#39;O&#39;, &#39;O&#39;, &#39;O&#39;, &#39;O&#39;, &#39;B-gpe&#39;, &#39;O&#39;, &#39;O&#39;, &#39;O&#39;, &#39;O&#39;, &#39;O&#39;] . Split the dataset into Train and Test using sklearn . from sklearn.model_selection import train_test_split #split into 80% train and 20% test X_train, X_test, y_train, y_test = train_test_split(sentences, tags, test_size=0.2, random_state=42) . TRAIN_FILE_PATH = &#39;/content/drive/My Drive/transformers-ner/data/train.txt&#39; TEST_FILE_PATH = &#39;/content/drive/My Drive/transformers-ner/data/test.txt&#39; LABELS_FILE_PATH = &#39;/content/drive/My Drive/transformers-ner/data/labels.txt&#39; with open(TRAIN_FILE_PATH,&#39;w&#39;) as ftrain: for (k,v) in zip(X_train, y_train): [ftrain.write(s+&#39; &#39;+t+&#39; n&#39;) for s,t in zip(k,v)] ftrain.write(&#39; n&#39;) with open(TEST_FILE_PATH,&#39;w&#39;) as ftest: for (k,v) in zip(X_test, y_test): [ftest.write(s+&#39; &#39;+str(t)+&#39; n&#39;) for s,t in zip(k,v)] ftest.write(&#39; n&#39;) . Prepare the labels file with list of unique labels . with open(LABELS_FILE_PATH,&#39;w&#39;) as f: for tag in df[&#39;Tag&#39;].unique(): print(tag) f.write(str(tag)+&#39; n&#39;) . O B-geo B-gpe B-per I-geo B-org I-org B-tim B-art I-art I-per I-gpe I-tim B-nat B-eve I-eve I-nat . Download Finetuning Code from Transformers Package . Download following files from transformers github repo. . !wget https://raw.githubusercontent.com/huggingface/transformers/master/examples/token-classification/utils_ner.py !wget https://raw.githubusercontent.com/huggingface/transformers/master/examples/token-classification/run_ner.py !wget https://raw.githubusercontent.com/huggingface/transformers/master/examples/token-classification/tasks.py . Training Code . The datafiles are converted into Input Example and and input features using the tasks.py NER class. The run_ner.py takes care of converting . Datafile -&gt; InputExample -&gt; InputFeature -&gt; Dataset -&gt; DataLoader . which is required for Training Loop. We can simply run the run_ner.py file with all the required parameters. . We will perform training using run_ner.py but before that let us look at how the InputExample and InputFeature looks like . from tasks import NER task = NER() examples = task.read_examples_from_file(&#39;/content/drive/My Drive/transformers-ner/data&#39;,mode= &#39;train&#39;) . examples[:2] . [InputExample(guid=&#39;train-1&#39;, words=[&#39;South&#39;, &#39;Korea&#39;, &#34;&#39;s&#34;, &#39;government&#39;, &#39;Tuesday&#39;, &#39;also&#39;, &#39;unveiled&#39;, &#39;a&#39;, &#39;so-called&#39;, &#39;Green&#39;, &#39;New&#39;, &#39;Job&#39;, &#39;Creation&#39;, &#39;Plan&#39;, &#39;,&#39;, &#39;expected&#39;, &#39;to&#39;, &#39;create&#39;, &#39;9,60,000&#39;, &#39;new&#39;, &#39;jobs&#39;, &#39;.&#39;], labels=[&#39;B-geo&#39;, &#39;I-geo&#39;, &#39;O&#39;, &#39;O&#39;, &#39;B-tim&#39;, &#39;O&#39;, &#39;O&#39;, &#39;O&#39;, &#39;O&#39;, &#39;O&#39;, &#39;O&#39;, &#39;O&#39;, &#39;O&#39;, &#39;O&#39;, &#39;O&#39;, &#39;O&#39;, &#39;O&#39;, &#39;O&#39;, &#39;O&#39;, &#39;O&#39;, &#39;O&#39;, &#39;O&#39;]), InputExample(guid=&#39;train-2&#39;, words=[&#39;When&#39;, &#39;the&#39;, &#39;Lion&#39;, &#39;found&#39;, &#39;that&#39;, &#39;he&#39;, &#39;could&#39;, &#39;not&#39;, &#39;escape&#39;, &#39;,&#39;, &#39;he&#39;, &#39;flew&#39;, &#39;upon&#39;, &#39;the&#39;, &#39;sheep&#39;, &#39;and&#39;, &#39;killed&#39;, &#39;them&#39;, &#39;,&#39;, &#39;and&#39;, &#39;then&#39;, &#39;attacked&#39;, &#39;the&#39;, &#39;oxen&#39;, &#39;.&#39;], labels=[&#39;O&#39;, &#39;O&#39;, &#39;O&#39;, &#39;O&#39;, &#39;O&#39;, &#39;O&#39;, &#39;O&#39;, &#39;O&#39;, &#39;O&#39;, &#39;O&#39;, &#39;O&#39;, &#39;O&#39;, &#39;O&#39;, &#39;O&#39;, &#39;O&#39;, &#39;O&#39;, &#39;O&#39;, &#39;O&#39;, &#39;O&#39;, &#39;O&#39;, &#39;O&#39;, &#39;O&#39;, &#39;O&#39;, &#39;O&#39;, &#39;O&#39;])] . labels = [] for t in open(LABELS_FILE_PATH).readlines(): labels.append(t.replace(&#39; n&#39;,&#39;&#39;)) labels . [&#39;O&#39;, &#39;B-geo&#39;, &#39;B-gpe&#39;, &#39;B-per&#39;, &#39;I-geo&#39;, &#39;B-org&#39;, &#39;I-org&#39;, &#39;B-tim&#39;, &#39;B-art&#39;, &#39;I-art&#39;, &#39;I-per&#39;, &#39;I-gpe&#39;, &#39;I-tim&#39;, &#39;B-nat&#39;, &#39;B-eve&#39;, &#39;I-eve&#39;, &#39;I-nat&#39;] . from transformers import AutoTokenizer tokenizer= AutoTokenizer.from_pretrained(&#39;roberta-base&#39;) . features = task.convert_examples_to_features(examples,label_list=labels, max_seq_length=128, tokenizer=tokenizer) . features[:2] . [InputFeatures(input_ids=[3, 10050, 530, 33594, 18, 11455, 25464, 19726, 879, 548, 6691, 102, 2527, 12, 4155, 19247, 4030, 43128, 40008, 1258, 35351, 6, 10162, 560, 32845, 466, 6, 2466, 6, 151, 4651, 41207, 4, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], attention_mask=[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], token_type_ids=None, label_ids=[-100, 1, 4, -100, 0, 0, 7, 0, 0, -100, -100, 0, 0, -100, -100, 0, 0, 0, 0, -100, 0, 0, 0, 0, 0, 0, -100, -100, -100, -100, 0, 0, 0, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100]), InputFeatures(input_ids=[3, 1779, 627, 574, 1499, 19256, 6025, 700, 17304, 3654, 46230, 6, 700, 40307, 605, 32630, 627, 8877, 2462, 463, 39132, 35369, 6, 463, 13040, 2611, 10074, 627, 4325, 225, 4, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], attention_mask=[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], token_type_ids=None, label_idspython run_ner.py --model_name_or_path &#39;roberta-base&#39; --labels &#39;/content/drive/My Drive/transformers-ner/data/labels.txt&#39; --data_dir &#39;/content/drive/My Drive/transformers-ner/data&#39; --output_dir &#39;model&#39; --max_seq_length &#39;128&#39; --num_train_epochs 3 --per_device_train_batch_size 8 --save_steps 1000000 --seed 16 --do_train --do_predict --overwrite_output_dir --fp16 . After training for 3 epochs the model achieves an accuracy 97% of on the test dataset . eval_loss = 0.08999748958216078 eval_accuracy_score = 0.9735164039117754 eval_precision = 0.8436429136279765 eval_recall = 0.8522545712764069 eval_f1 = 0.84792687773215 . . Tip: Reduce the per_device_train_batch_size if you are facing out of memory issues. . Model Prediction . Once the model is trained, the final model weights, configuration, tokenizer will be avilable in the output_dir. We will use the Pipeline module to do the model predictions. . from transformers import pipeline model_name = &#39;/content/drive/My Drive/transformers-ner/model&#39; nlp = pipeline(task=&quot;ner&quot;, model=model_name, tokenizer=model_name, framework=&quot;pt&quot;,grouped_entities=True) . sequence = [&quot;Remind me to do those 11 things at 10.&quot;, &quot;Today, Sachin won&#39;t be playing in the cricket match between India and Pakistan.&quot;, &quot;The phase-III human clinical trial of the COVID-19 vaccine developed by Oxford University, and being manufactured by the Serum Institute of India (SII), will begin at the Sassoon General Hospital in Pune next week.&quot;, &quot;On 24 June I will be travelling to Goa.&quot;, &quot;Russian Government is trying hard to convince the world that their vaccine is effective.&quot;, &quot;Pharma company Astrazeneca has released a 111-page trial blueprint on 21 Sept 2020.&quot; ] result = nlp(sequence) result . [[{&#39;entity_group&#39;: &#39;B-tim&#39;, &#39;score&#39;: 0.5767102837562561, &#39;word&#39;: &#39; 10&#39;}], [{&#39;entity_group&#39;: &#39;B-tim&#39;, &#39;score&#39;: 0.9989056587219238, &#39;word&#39;: &#39;Today&#39;}, {&#39;entity_group&#39;: &#39;B-per&#39;, &#39;score&#39;: 0.8931595087051392, &#39;word&#39;: &#39; Sachin&#39;}, {&#39;entity_group&#39;: &#39;B-geo&#39;, &#39;score&#39;: 0.7804469466209412, &#39;word&#39;: &#39; India&#39;}, {&#39;entity_group&#39;: &#39;B-geo&#39;, &#39;score&#39;: 0.5479587316513062, &#39;word&#39;: &#39; Pakistan&#39;}], [{&#39;entity_group&#39;: &#39;B-org&#39;, &#39;score&#39;: 0.9265464246273041, &#39;word&#39;: &#39; Oxford University&#39;}, {&#39;entity_group&#39;: &#39;B-org&#39;, &#39;score&#39;: 0.9648504376411438, &#39;word&#39;: &#39; Serum Institute of India&#39;}, {&#39;entity_group&#39;: &#39;B-org&#39;, &#39;score&#39;: 0.9607944488525391, &#39;word&#39;: &#39;SII&#39;}, {&#39;entity_group&#39;: &#39;B-org&#39;, &#39;score&#39;: 0.9906694442033768, &#39;word&#39;: &#39; Sassoon General Hospital&#39;}, {&#39;entity_group&#39;: &#39;B-geo&#39;, &#39;score&#39;: 0.8247686326503754, &#39;word&#39;: &#39; Pune&#39;}], [{&#39;entity_group&#39;: &#39;B-tim&#39;, &#39;score&#39;: 0.9983495771884918, &#39;word&#39;: &#39; 24 June&#39;}, {&#39;entity_group&#39;: &#39;B-geo&#39;, &#39;score&#39;: 0.9488541781902313, &#39;word&#39;: &#39; Goa&#39;}], [{&#39;entity_group&#39;: &#39;B-gpe&#39;, &#39;score&#39;: 0.9983706474304199, &#39;word&#39;: &#39;Russian&#39;}], [{&#39;entity_group&#39;: &#39;B-org&#39;, &#39;score&#39;: 0.9142362674077352, &#39;word&#39;: &#39; Astrazeneca&#39;}, {&#39;entity_group&#39;: &#39;B-tim&#39;, &#39;score&#39;: 0.9961005647977194, &#39;word&#39;: &#39; 21 Sept 2020&#39;}]] . nlp = pipeline(task=&quot;ner&quot;, model=model_name, tokenizer=model_name, framework=&quot;pt&quot;,grouped_entities=False) result = nlp(sequence) result . [[{&#39;entity&#39;: &#39;B-tim&#39;, &#39;index&#39;: 10, &#39;score&#39;: 0.5767102837562561, &#39;word&#39;: &#39;Ġ10&#39;}], [{&#39;entity&#39;: &#39;B-tim&#39;, &#39;index&#39;: 1, &#39;score&#39;: 0.9989056587219238, &#39;word&#39;: &#39;Today&#39;}, {&#39;entity&#39;: &#39;B-per&#39;, &#39;index&#39;: 3, &#39;score&#39;: 0.9104933738708496, &#39;word&#39;: &#39;ĠSach&#39;}, {&#39;entity&#39;: &#39;I-per&#39;, &#39;index&#39;: 4, &#39;score&#39;: 0.8758256435394287, &#39;word&#39;: &#39;in&#39;}, {&#39;entity&#39;: &#39;B-geo&#39;, &#39;index&#39;: 14, &#39;score&#39;: 0.7804469466209412, &#39;word&#39;: &#39;ĠIndia&#39;}, {&#39;entity&#39;: &#39;B-geo&#39;, &#39;index&#39;: 16, &#39;score&#39;: 0.5479587316513062, &#39;word&#39;: &#39;ĠPakistan&#39;}], [{&#39;entity&#39;: &#39;B-org&#39;, &#39;index&#39;: 17, &#39;score&#39;: 0.8851138353347778, &#39;word&#39;: &#39;ĠOxford&#39;}, {&#39;entity&#39;: &#39;I-org&#39;, &#39;index&#39;: 18, &#39;score&#39;: 0.9679790139198303, &#39;word&#39;: &#39;ĠUniversity&#39;}, {&#39;entity&#39;: &#39;B-org&#39;, &#39;index&#39;: 25, &#39;score&#39;: 0.9966782331466675, &#39;word&#39;: &#39;ĠSer&#39;}, {&#39;entity&#39;: &#39;I-org&#39;, &#39;index&#39;: 26, &#39;score&#39;: 0.9899328947067261, &#39;word&#39;: &#39;um&#39;}, {&#39;entity&#39;: &#39;I-org&#39;, &#39;index&#39;: 27, &#39;score&#39;: 0.9981464743614197, &#39;word&#39;: &#39;ĠInstitute&#39;}, {&#39;entity&#39;: &#39;I-org&#39;, &#39;index&#39;: 28, &#39;score&#39;: 0.9931064248085022, &#39;word&#39;: &#39;Ġof&#39;}, {&#39;entity&#39;: &#39;I-org&#39;, &#39;index&#39;: 29, &#39;score&#39;: 0.8463881611824036, &#39;word&#39;: &#39;ĠIndia&#39;}, {&#39;entity&#39;: &#39;B-org&#39;, &#39;index&#39;: 31, &#39;score&#39;: 0.9819338917732239, &#39;word&#39;: &#39;S&#39;}, {&#39;entity&#39;: &#39;I-org&#39;, &#39;index&#39;: 32, &#39;score&#39;: 0.9396550059318542, &#39;word&#39;: &#39;II&#39;}, {&#39;entity&#39;: &#39;B-org&#39;, &#39;index&#39;: 38, &#39;score&#39;: 0.9816001653671265, &#39;word&#39;: &#39;ĠSass&#39;}, {&#39;entity&#39;: &#39;I-org&#39;, &#39;index&#39;: 39, &#39;score&#39;: 0.9911067485809326, &#39;word&#39;: &#39;oon&#39;}, {&#39;entity&#39;: &#39;I-org&#39;, &#39;index&#39;: 40, &#39;score&#39;: 0.9923107028007507, &#39;word&#39;: &#39;ĠGeneral&#39;}, {&#39;entity&#39;: &#39;I-org&#39;, &#39;index&#39;: 41, &#39;score&#39;: 0.9976601600646973, &#39;word&#39;: &#39;ĠHospital&#39;}, {&#39;entity&#39;: &#39;B-geo&#39;, &#39;index&#39;: 43, &#39;score&#39;: 0.9934419393539429, &#39;word&#39;: &#39;ĠP&#39;}, {&#39;entity&#39;: &#39;I-geo&#39;, &#39;index&#39;: 44, &#39;score&#39;: 0.6560953259468079, &#39;word&#39;: &#39;une&#39;}], [{&#39;entity&#39;: &#39;B-tim&#39;, &#39;index&#39;: 2, &#39;score&#39;: 0.9988309144973755, &#39;word&#39;: &#39;Ġ24&#39;}, {&#39;entity&#39;: &#39;I-tim&#39;, &#39;index&#39;: 3, &#39;score&#39;: 0.9978682398796082, &#39;word&#39;: &#39;ĠJune&#39;}, {&#39;entity&#39;: &#39;B-geo&#39;, &#39;index&#39;: 9, &#39;score&#39;: 0.9958592057228088, &#39;word&#39;: &#39;ĠGo&#39;}, {&#39;entity&#39;: &#39;I-geo&#39;, &#39;index&#39;: 10, &#39;score&#39;: 0.9018491506576538, &#39;word&#39;: &#39;a&#39;}], [{&#39;entity&#39;: &#39;B-gpe&#39;, &#39;index&#39;: 1, &#39;score&#39;: 0.9983706474304199, &#39;word&#39;: &#39;Russian&#39;}], [{&#39;entity&#39;: &#39;B-org&#39;, &#39;index&#39;: 4, &#39;score&#39;: 0.9142678380012512, &#39;word&#39;: &#39;ĠAst&#39;}, {&#39;entity&#39;: &#39;I-org&#39;, &#39;index&#39;: 5, &#39;score&#39;: 0.9503166675567627, &#39;word&#39;: &#39;razen&#39;}, {&#39;entity&#39;: &#39;I-org&#39;, &#39;index&#39;: 6, &#39;score&#39;: 0.8781242966651917, &#39;word&#39;: &#39;eca&#39;}, {&#39;entity&#39;: &#39;B-tim&#39;, &#39;index&#39;: 16, &#39;score&#39;: 0.9991741180419922, &#39;word&#39;: &#39;Ġ21&#39;}, {&#39;entity&#39;: &#39;I-tim&#39;, &#39;index&#39;: 17, &#39;score&#39;: 0.9986246824264526, &#39;word&#39;: &#39;ĠSept&#39;}, {&#39;entity&#39;: &#39;I-tim&#39;, &#39;index&#39;: 18, &#39;score&#39;: 0.9905028939247131, &#39;word&#39;: &#39;Ġ2020&#39;}]] . We will try Training Token Classification for one more dataset in Part-3 to see how easy it is do the prediction and training for any dataset. .",
            "url": "http://forgetfulcrow.com/nlp/token%20classification/2020/09/20/_09_20_Entity_Extraction_Transformers_Part_2.html",
            "relUrl": "/nlp/token%20classification/2020/09/20/_09_20_Entity_Extraction_Transformers_Part_2.html",
            "date": " • Sep 20, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "Entity Extraction (NER) - Training and Inference using Transformers - Part 1",
            "content": ". In Part-1, we will discuss how to use the Pretrained language model, the Token Classification Head, and Tokenizer. You can skip the Part-1 if you want to go ahead and check the finetuning demo and model prediction. . In Part-2, we will learn to finetune the TokenClassification head of RoBerta model. . Token Classification Task . The token classification task identifies the entities of interest in the text. For NER task, we identify the Named entities like Person, Location, Organization and etc. . . Fig 0. NER task . Pretrained Language Model . A pretrained language model like BERT, ALBERT provides the contextual embedding for a token. The contextual embedding is the representation based on the sentence/context a token is used in. So it will understand difference between a River Bank and a Financial Banks. . What is a token? . A token could be a whole word or a substring of a word. If a word is not part of the model vocabulary it would be broken down into subwords based on some algorithm. . There are 3 important parts of a pretrained language model . Model - Neural Network model Architecture Tokenizer - Preprocessor for converting the text into the input representation that the model can understand. Model Weights - The weights of the model are saved in a seperate file. . How to use a pretrained model for a specific task? . For any task like NER or Classification, we add a Task head(another Neural Network layer on top of base model) to map word embedding into output labels. During the Training process we learn weights of the head to classify each token properly. . . Fig 1. Pretrained Bert Model without any task specific head. Each sentence is converted into token embedding Tok1, Tok2 using a Tokenizer and the fed into the Model which outputs new representation for each token Tok1, Tok2 .. along with additional token [CLS] and [SEP] . Installation . Install the latest package of transformers from the github or follow the installation instructions here https://huggingface.co/transformers/installation.html . #install the latest transformers library !pip install git+https://github.com/huggingface/transformers.git . import transformers transformers.__version__ ## 3.1.0 . &#39;3.1.0&#39; . Base Language Model . Roberta Pretrained embeddings, or any other Language Model embeddings, provides a vector representation for each token. A word could be broken down into multiple tokens by the tokenizer. . from transformers import AutoModel, AutoTokenizer import torch # Load the Ro pretrained tokenizer and model tokenizer = AutoTokenizer.from_pretrained(&#39;roberta-base&#39;) model = AutoModel.from_pretrained(&#39;roberta-base&#39;) . Tokenizer . A tokenizer . split the sentence into words and then further into subwords if the word is not part of the Tokenizer Vocabulary. | assign id to each token based on the vocabulary dictionary (word to integer mapping) | . Since the pretrained models are not trained for any specific domains, they consider Top N high frequency tokens. It is not possible to add all the words to the model vocabulary because that would drastically increase the model Embedding layer weights and also, lot of new words are added to dictionary every now and then. . . Fig 2. The above picture is taked from the Huggingface Tokenizer example. It clearly illustrates the character level, the token level and the word level tokenizer. . The middle one is the Token level Tokenizer which is used frequently now a days. . #The Roberta tokenizer vocabulary size tokenizer.vocab_size . 50265 . #list all the vocabulary words in the tokenizer tokenizer.get_vocab() . Any word not present in the vocabulary will be split into tokens. . #__call__ method Returns a dictionary containing the encoded sequence or sequence pair and additional informationReturns a dictionary containing the encoded sequence or sequence pair and additional information #tokenize the sentence using __call__ method of the tokenizer inputs = tokenizer(&quot;&quot;&quot;Today, Sachin won&#39;t be playing in the cricket match between India and Pakistan.&quot;&quot;&quot;, return_tensors=&#39;pt&#39;) inputs . {&#39;input_ids&#39;: tensor([[ 0, 5625, 6, 19686, 179, 351, 75, 28, 816, 11, 5, 5630, 914, 227, 666, 8, 1752, 4, 2]]), &#39;attention_mask&#39;: tensor([[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]])} . Let&#39;s decode the token id&#39;s to see the token text . [tokenizer.decode(i) for i in inputs[&#39;input_ids&#39;][0].tolist()] . [&#39;&lt;s&gt;&#39;, &#39;Today&#39;, &#39;,&#39;, &#39; Sach&#39;, &#39;in&#39;, &#39; won&#39;, &#34;&#39;t&#34;, &#39; be&#39;, &#39; playing&#39;, &#39; in&#39;, &#39; the&#39;, &#39; cricket&#39;, &#39; match&#39;, &#39; between&#39;, &#39; India&#39;, &#39; and&#39;, &#39; Pakistan&#39;, &#39;.&#39;, &#39; Sach&#39;, &#39;in&#39;, &#39; wil&#39;, &#39;&lt;/s&gt;&#39;] . The word Sachin is split into [&#39;Sach,&#39;in&#39;] tokens. This method of splitting a word into tokens helps in handling out of vocabulary words. . Special Tokens . Roberta uses special token &lt;s&gt; to mark sentence boundaries. While BERT has special tokens like [CLS] [SEP] . [CLS] provides the vector representation for the whole sentence and [SEP] token is useful when we have to encode two sentences. . Tokenize a sentence . There are a lot of tokenizer functions available in the transformers library. It can get really confusing as to which function to use and when. . __call__ method is a wrapper around the tokenizer.tokenize method. It adds special tokens specific to the model and returns additional fields like token_type_ids and attention_masks . tokenize method splits the sentence into tokens without adding any special tokens. . convert_tokens_to_ids is called after converting a string into tokens, to convert the tokens into vocabulary token ids . tokens = tokenizer.tokenize(&quot;I don&#39;t like it here&quot;) tokens . [&#39;I&#39;, &#39;Ġdon&#39;, &#34;&#39;t&#34;, &#39;Ġlike&#39;, &#39;Ġit&#39;, &#39;Ġhere&#39;] . tokenizer.convert_tokens_to_ids(tokens) . [100, 218, 75, 101, 24, 259] . tokenizer.build_inputs_with_special_tokens(tokens) . [0, &#39;I&#39;, &#39;Ġdon&#39;, &#34;&#39;t&#34;, &#39;Ġlike&#39;, &#39;Ġit&#39;, &#39;Ġhere&#39;, 2] . use the __call__ method to get the token_ids with extra inputs required by the specific model. . tokenizer(&quot;I don&#39;t like it here&quot;) . {&#39;input_ids&#39;: [2, 31, 221, 22, 38, 101, 32, 235, 3], &#39;token_type_ids&#39;: [0, 0, 0, 0, 0, 0, 0, 0, 0], &#39;attention_mask&#39;: [1, 1, 1, 1, 1, 1, 1, 1, 1]} . Before trying to understand the attention_mask and token_type_ids return values. Let us first look at the inputs required by a transformers model. . Model Inputs . The base RoBERTa Model provides the raw hidden-states without any specific head on top. . The forward method of the Model has following input parameters . def forward( self, input_ids=None, attention_mask=None, token_type_ids=None, position_ids=None, head_mask=None, inputs_embeds=None, output_attentions=None, output_hidden_states=None, return_dict=None, ):input_ids - The input ids are often the only required parameters to be passed to the model as input. These are numerical representation of the tokens the one which we got in the previous step using tokenizer call method. attention_mask - A binary value representing whether to attend to the corresponding input_id token or not. It is useful when we have different length sentences in a batch and we need to pad all sentences to the same length. We ignore the padding index input_id using attention mask. . token_type_id - Useful when encoding multiple sentences. . The tokenizers __call__ method handles everything to prepare the input for the model. It does more than just encoding the sentence into numeric representation. . Model Inference / Output . Run the model for the input sentence and get the embedding for each token . output = model(**inputs) . output[0].shape #(batch_size, #tokens, embedding_dim) . torch.Size([1, 19, 768]) . We provided a single sentence as input to the model, hence the batch_size of 1. . The tokenizer converted the sentence into 19 tokens, including the special tokens then the model converted each token into a vector representation of 768 dimension, hence [19,768] . output[1].shape #pooled output - the vector representation of a whole sentence . torch.Size([1, 768]) . output = model(input_ids= inputs[&#39;input_ids&#39;], attention_mask=inputs[&#39;attention_mask&#39;] , return_dict=True) . if not return_dict:return (sequence_output, pooled_output) + encoder_outputs[1:] return BaseModelOutputWithPooling( last_hidden_state=sequence_output, pooler_output=pooled_output, hidden_states=encoder_outputs.hidden_states, attentions=encoder_outputs.attentions, ) . To return hiddden states and attentions, we have to set output_attentions and output_hidden_states in the model call . output = model(input_ids= inputs[&#39;input_ids&#39;], attention_mask=inputs[&#39;attention_mask&#39;] , return_dict=True, output_hidden_states=True, output_attentions= True) . len(output.attentions) . 12 . output.attentions[0].shape . torch.Size([1, 12, 19, 19]) . Token Classification(TC) Head for Entity Extraction . What we have learned so far - . How to tokenize a sentence using model specific tokenizer | How to get contextual embeddings using the Pretrained Model | . The Token classification task assigns a label to each token in the sentence. . For example in the sentence . &quot;The battery of the speaker is very poor.&quot; TC head will map each token embedding to a label like . The O | battery Aspect | of O | the O | speaker O | is O | very Sentiment | poor Sentiment. | . Here, we wanted to extract the Aspect and the Sentiment in the text. O is Others. . RoBerta Token Classification Head . Since we have the embedding vector for each token, if we add a linear head on top of the embedding to map each embedding to one of the labels, we will get a label for each token. . hidden_size of Roberta is 786, and depending on the num_labels(the entities of interest) it will do the token classification . From RobertaTokenClassification code . self.classifier = nn.Linear(config.hidden_size, self.config.num_labels) self.dropout = nn.Dropout(config.hidden_dropout_prob) sequence_output = self.dropout(sequence_output) logits = self.classifier(sequence_output) . (N, T, 786) -&gt; (N, T, num_labels) . N - batch_size T - Number of tokens . . Token Classification Output . During Training, we will provide labels along with the input_ids to the model. The model calculates the CrossEntropy Loss of the predicted labels and the ground truth and the weights are updated with the gradient. . Task Head will return the loss if labels are provided as part of the model input . output = (logits,) + outputs[2:]return ((loss,) + output) if loss is not None else output . loss is the cross entropy loss between the labels and the logits . loss_fct = CrossEntropyLoss() loss_fct(logits.view(-1, self.num_labels), labels.view(-1)) . from transformers import AutoModelForTokenClassification,RobertaForTokenClassification . Let us run Token Classification model Prediction without any finetuning to see the output of the model . from transformers import AutoConfig config = AutoConfig.from_pretrained( &#39;roberta-base&#39;, num_labels=3, id2label={0:&#39;ASPECT&#39;,1:&#39;OTHERS&#39;,2:&#39;EXTRA&#39;}, label2id={label: i for i, label in enumerate([&#39;ASPECT&#39;,&#39;OTHERS&#39;,&#39;EXTRA&#39;])} ) . config . RobertaConfig { &#34;architectures&#34;: [ &#34;RobertaForMaskedLM&#34; ], &#34;attention_probs_dropout_prob&#34;: 0.1, &#34;bos_token_id&#34;: 0, &#34;eos_token_id&#34;: 2, &#34;gradient_checkpointing&#34;: false, &#34;hidden_act&#34;: &#34;gelu&#34;, &#34;hidden_dropout_prob&#34;: 0.1, &#34;hidden_size&#34;: 768, &#34;id2label&#34;: { &#34;0&#34;: &#34;ASPECT&#34;, &#34;1&#34;: &#34;OTHERS&#34;, &#34;2&#34;: &#34;EXTRA&#34; }, &#34;initializer_range&#34;: 0.02, &#34;intermediate_size&#34;: 3072, &#34;label2id&#34;: { &#34;ASPECT&#34;: 0, &#34;EXTRA&#34;: 2, &#34;OTHERS&#34;: 1 }, &#34;layer_norm_eps&#34;: 1e-05, &#34;max_position_embeddings&#34;: 514, &#34;model_type&#34;: &#34;roberta&#34;, &#34;num_attention_heads&#34;: 12, &#34;num_hidden_layers&#34;: 12, &#34;pad_token_id&#34;: 1, &#34;type_vocab_size&#34;: 1, &#34;vocab_size&#34;: 50265 } . model = RobertaForTokenClassification.from_pretrained(&#39;albert-base-v2&#39;, config = config) . output = model(**inputs) output . (tensor([[[ 8.0052e-01, -7.5425e-02, 4.5114e-01], [ 8.4571e-01, -2.9972e-01, 1.7145e-01], [ 9.3446e-01, -7.4490e-01, 1.6924e-01], [ 2.6570e-01, 1.0174e-01, 5.2277e-01], [ 4.5587e-01, -1.6770e-01, 8.7134e-01], [ 1.2516e+00, -6.7618e-01, 7.1735e-01], [ 7.4633e-01, 4.1005e-01, 4.7558e-01], [ 5.2609e-01, -9.0839e-02, 5.9321e-01], [ 8.0308e-01, -2.6667e-01, 1.1635e+00], [ 7.8067e-01, 9.4608e-02, 4.2717e-02], [ 6.4042e-01, -1.1400e-01, 1.8376e-01], [ 2.9740e-01, -3.3065e-01, 7.9212e-01], [ 8.3010e-01, -6.5126e-01, 5.6326e-01], [ 4.0874e-01, -1.6919e-01, 1.2946e+00], [ 9.3214e-01, 2.3070e-01, 3.4809e-01], [ 9.2671e-01, -4.8473e-01, 3.4551e-01], [ 5.1119e-01, -2.8516e-01, 2.6419e-01], [ 6.8518e-01, -6.7281e-01, 6.1023e-01], [ 6.1454e-01, -1.0960e-03, 2.6023e-01]]], grad_fn=&lt;AddBackward0&gt;),) . output[0].shape . torch.Size([1, 19, 3]) . This outputs a 3-label probabilities for each token. . During training, we will provide the labels also as input to the model which will calculate the CorssEntropy loss. . labels = torch.randint(0,3,(19,)) . outputs = model(input_ids = inputs[&#39;input_ids&#39;],attention_mask= inputs[&#39;attention_mask&#39;], labels = labels) loss = outputs[0] . In the next Part, we will discuss about finetuning the model for Entity Extraction Task .",
            "url": "http://forgetfulcrow.com/nlp/token%20classification/2020/09/20/_09_20_Entity_Extraction_Transformers_Part_1.html",
            "relUrl": "/nlp/token%20classification/2020/09/20/_09_20_Entity_Extraction_Transformers_Part_1.html",
            "date": " • Sep 20, 2020"
        }
        
    
  
    
        ,"post3": {
            "title": "A Neural Probabilistic Language Model",
            "content": "We will go through the paper by Yoshua Bengio - A Neural Probabilistic Language Model . Language Modeling . In language modeling task we try to learn the joint probability function of word sequences p(w1 w2 .. wm). . p(w1 w2 .. wm) = count(w1 w2 .. wm) / count(all m-gram word seq) . Unseen Word sequences . Calculating joint probability is difficult becuase it involves counting all the m-word sequences and also, it doesn&#39;t generalize well on unseen word sequences. . What will happen to the word sequences we have not seen during the modeling time? We will assign a zero probability to all such sequences. . We use probability chain formula to frame the joint probability as a product of conditional probabilities. We define joint probability as product of conditional probabilities as follows . p(w1 w2 ..wm) = p(w1) p(w2|w1) p(w3|w2w1) .. p(wm|w1..wm-1) . Calculating conditional probability is comparatively easy. p(w3|w2 w1) = count(w1 w2 w2)/count(w1 w2) . But still we have the same problem when calculating conditional probability of long word sequences - it is highly likely that we won&#39;t have seen such long sequence of exact words during the modeling time. How do we handle this? . N-gram assumption . Linguists have observed that a word depends only n previous words and not all the words before it. This is the n-gram or Markov assumption. This simplifies the function p(wm|w1 w2..wm-1) into p(wm| wm-n ..wm-1). If we make a trigram(n=3) assumption, which is popular in statistical language modeling, it becomes p(wm| wm-1 wm-2), i.e. each word is assumed to be dependent on only last two words in the sequence. . Back-off and Smoothed Models . To further improve the generalization on unseen word sequences, there a few more bag of tricks like back-off trigram model where if p(w4|w3 w2) is not known to us, we consider futher smaller sequences until we find the required probability. We look at p(w4|w3) if it is available, else we look at p(w4). Also, we use smoothed trigram model to distribute the probability mass. . Bengio&#39;s NNLM paper . It addresses two problems with the traditional statistical language modelling . Curse of Dimensionality To model a joint distribution of 10-gram word sequence of 10,000 words vocabulary, there are 10,000^10 -1 free parameters required. When modeling continous variables, we obtain generalization more easily because function to be learned is expected to have some local smoothness, i.e. if we have smoothness property for language modeling task, we should be able to use some local smoothness to generalize the model to unseen word sequences. If we have seen a word sequence &quot;The cat is walking in the bedroom&quot;, it should be able to generalize to simliar word sequence like &quot;A dog was running in the room&quot; as &quot;dog&quot; and &quot;cat&quot; have similar semantic and grammatic roles. The generalization in the statistical language modeling is obtained by gluing together(product of conditional probabilities) the short subsequneces. Typically, trigrams were considered becuase of the curse of dimensionality. It doesn&#39;t take in to account more than 1-2 previous words. | Not taking into account similarity between words The big problem in language modeling is generalization. If the model understands the semantic simliary between words, it will generalize better. | Previous Work . Neural Networks for Modeling Joint Probability Distribution- Neural networks have been used to model the joint probability distribution of random variables and also for lanugage modeling before this paper. Each output node spits the conditional probability of a word give the sequence of words as input. . | Word Similarities Discovering the word simliarties to obtain generalization has been tried as well, by clustering similar words together but the model proposed by Bengio learns the distributed feature vector to represent word similarty. . | Vector space representation of words -The previous works in information retrieval has explored the vector-space representation of words(LSI) but this paper explores the reprsentation of words which helps in representing the probability distribution of the word sequences. The paper mentions that learning the word representation and probability distribution jointly is very useful. . | . . Implementation . import torch import torch.nn as nn import torch.optim as optim . corpus = [&#39;i like dog&#39;, &#39;i love coffee&#39;, &#39;i hate milk&#39;] # list of all the sentences vocabulary = list(set(&#39; &#39;.join(corpus).split())) # |v| list of all the uwords word2int = {w:i for i, w in enumerate(vocabulary)} corpus = [&#39;i like dog&#39;, &#39;i love coffee&#39;, &#39;i hate milk&#39;] # list of all the sentences vocabulary = list(set(&#39; &#39;.join(corpus).split())) # |v| list of all the uwords n_vocab = len(vocabulary) class NNLM(nn.Module): def __init__(self): super(NNLM, self).__init__() # projection layer self.C = nn.Embedding(n_vocab, m) # hidden layer # tanh(XH + d) self.H = nn.Parameter(torch.randn(n_step * m, n_hidden).type(torch.FloatTensor)) self.d = nn.Parameter(torch.randn(n_hidden).type(torch.FloatTensor)) # hidden layer # WX + b self.W = nn.Parameter(torch.randn(n_step * m, n_vocab).type(torch.FloatTensor)) self.b = nn.Parameter(torch.randn(n_vocab).type(torch.FloatTensor)) # tanh U self.U = nn.Parameter(torch.randn(n_hidden, n_vocab).type(torch.FloatTensor)) def forward(self, X): X = self.C(X) # (batch_size, n_step, m) X = X.view(-1, n_step * m) # (batch_size, n_step * m) tanh = torch.tanh(self.d + torch.mm(X, self.H)) output = torch.mm(tanh, self.U) + torch.mm(X, self.W) + self.b return output def prepare_input(sentences): X = [] Y = [] for sent in sentences: sent = sent.split() X.append([word2int[word] for word in sent[:-1]]) Y.append(word2int[sent[-1]]) return (X, Y) . X, Y = prepare_input(corpus) m = 2 n_step = 2 n_hidden =2 model = NNLM() criterion = nn.CrossEntropyLoss() optimizer = optim.Adam(model.parameters(), lr=0.001) X = torch.LongTensor(X) Y = torch.LongTensor(Y) for epoch in range(5000): optimizer.zero_grad() output = model(X) # output : [batch_size, n_class], target_batch : [batch_size] (LongTensor, not one-hot) loss = criterion(output, Y) if (epoch + 1)%1000 == 0: print(&#39;Epoch:&#39;, &#39;%04d&#39; % (epoch + 1), &#39;cost =&#39;, &#39;{:.6f}&#39;.format(loss)) loss.backward() optimizer.step() . Epoch: 1000 cost = 0.207585 Epoch: 2000 cost = 0.035829 Epoch: 3000 cost = 0.012441 Epoch: 4000 cost = 0.005522 Epoch: 5000 cost = 0.002739 . input = [] for w in X: input.append([vocabulary[i] for i in w]) predictions = model(X).data.max(1, keepdim=True)[1].squeeze() for i,o in zip(input, [vocabulary[pred] for pred in predictions]): print(&#39;Input: &#39;+&#39; &#39;.join(i)) print(&#39;Output:&#39;,o) print(&#39; n&#39;) . Input: i like Output: dog Input: i love Output: coffee Input: i hate Output: milk . How word2vec improves on the NNLM model? . The embedding to hidden and hidden to softmax layers are expensive in NNLM network. The softmax layers has 300*|V| weights. For a vocabulary of 10,000 words, the number of weights will be approx 3 million. Word2vec simplifies the NNLM model in few ways. . use negative sampling to update only a fraction of 3M weights in output layer. | modeling a binary classification instead of next word prediction model | .",
            "url": "http://forgetfulcrow.com/nnlm/torch/language%20model/nlp/2020/05/03/A-Neural-Probabilistic-Language-Model-(1).html",
            "relUrl": "/nnlm/torch/language%20model/nlp/2020/05/03/A-Neural-Probabilistic-Language-Model-(1).html",
            "date": " • May 3, 2020"
        }
        
    
  
    
        ,"post4": {
            "title": "Detecting Handwritten text in Documents",
            "content": "Problem Statement . We wish to detect the handwritten text in the scanned/pdf document. It could be for number of reasons like . to identify if the document has been signed | to process handwritten text in the document in a different way | to mask the handwritten text | . Take following document image for an example. We wish to detect the text highlighted in the red bounding boxes. . Training Dataset . We will use the annotated dataset available in the following github repo https://github.com/CatalystCode/Handwriting/tree/master/Data/labelledcontracttrainingdata/trainingjpg_output_99/ . The dataset is part of the Microsoft blog available here https://devblogs.microsoft.com/cse/2018/05/07/handwriting-detection-and-recognition-in-scanned-documents-using-azure-ml-package-computer-vision-azure-cognitive-services-ocr/ . Each image is annotated in Pascal VOC Annotation format using Microsoft Vott Annotation tool. The directory structure of the annotated dataset looks like this . data/Annotations_99 data/JPEGImages_99 . There are 99 annotated images in the dataset. The images are present in JPEGImages_99 folder and corresponding xml annotations are available under Annotations_99. . An XML annotation file looks like . &lt;annotation verified=&quot;yes&quot;&gt; &lt;folder&gt;Annotation&lt;/folder&gt; &lt;filename&gt;07653e58-24d1-4b3f-9b4a-76057efe5c09-1&lt;/filename&gt; &lt;path&gt;C: data JPEGImages 07653e58-24d1-4b3f-9b4a-76057efe5c09-1.jpg&lt;/path&gt; &lt;source&gt; &lt;database&gt;Unknown&lt;/database&gt; &lt;/source&gt; &lt;size&gt; &lt;width&gt;1700&lt;/width&gt; &lt;height&gt;2200&lt;/height&gt; &lt;depth&gt;3&lt;/depth&gt; &lt;/size&gt; &lt;segmented&gt;0&lt;/segmented&gt; &lt;object&gt; &lt;name&gt;signature&lt;/name&gt; &lt;pose&gt;Unspecified&lt;/pose&gt; &lt;bndbox&gt; &lt;xmin&gt;192&lt;/xmin&gt; &lt;ymin&gt;1188&lt;/ymin&gt; &lt;xmax&gt;738&lt;/xmax&gt; &lt;ymax&gt;1320&lt;/ymax&gt; &lt;/bndbox&gt; &lt;/object&gt; ... . In Pascal VOC annotation, there is a seperate annotation file for each image. The data we are interested in the xml file is . image filename - 07653e58-24d1-4b3f-9b4a-76057efe5c09-1 | object attribute for each annotation in the image category/class of the marked annotation | bounding box coordinates of top left and right bottom position | . | . About Detectron2 Framework . We will use pytorch detectron2 framework because it is simple and easy to extend. There are simple Training, Visualization, and Prediction modules available in the detectron2 which handles most of the stuff and we can use it as is, or if required, we can extend the functionality. . Simple steps to train a vision model in Detectron2 . Convert dataset in the detectron2 format | Register the dataset and metadata information like class labels | Update the config with registered dataset (DATASETS.{TRAIN,TEST}), model weight (MODEL.WEIGHT), learning rate, Number of output classes (MODEL.ROI_HEADS.NUM_CLASSES), and other training and test parameters | Train the model using DefaultTrainer class | Dataset Preparation(step 1 &amp; 2) . Detectron2 expects the dataset as list[dict] in the following format. So for training with detectron2 we will have to convert our dataset in the following format. . [{&#39;file_name&#39;: &#39;datasets/JPEGImages/1.jpg&#39;, &#39;image_id&#39;: &#39;1&#39;, &#39;height&#39;: 3300, &#39;width&#39;: 2550, &#39;annotations&#39;: [{&#39;category_id&#39;: 1, &#39;bbox&#39;: [1050.1000264270613, 457.33333333333337, 1406.9139799154334, 587.7450980392157], &#39;bbox_mode&#39;: &lt;BoxMode.XYXY_ABS: 0&gt;}, {&#39;category_id&#39;: 1, &#39;bbox&#39;: [1529.9097515856238, 473.5098039215687, 1617.167679704017, 555.3921568627452], &#39;bbox_mode&#39;: &lt;BoxMode.XYXY_ABS: 0&gt;}]}] . Detectron registers this list of dict as torch dataset and uses the default dataloader and datasampler for training. We can register the list[dict] with detectron2 using following code . def get_dicts(): ... return list[dict] in the above format from detectron2.data import DatasetCatalog DatasetCatalog.register(&quot;my_dataset&quot;, get_dicts) . And to register the metadata information related to dataset like category mapping to id&#39;s, the type of dataset, we have to set the keyvalue pair using . MetadataCatalog.get(&quot;my_dataset&quot;).thing_classes = [&quot;person&quot;, &quot;dog&quot;] . Choosing a Model and Initializing Configuration (step 3) . Detectron2 has lot of pretrained model available in the model zoo. For handwritten text detection, we will choose Faster RCNN with FPN backbone. . We have to initialize the parameters and weights for model we want to train. . cfg = get_cfg() cfg.merge_from_file(&#39;&lt;pretrained model config&#39;&gt;) cfg.MODEL.WEIGHTS = &#39;&lt;path to pretrained model weight&gt; #custom config for training cfg.DATASETS.TRAIN = (&quot;&lt;registered training dataset name&gt;&quot;,) cfg.SOLVER.MAX_ITER = &#39;&lt;number of training iterations&gt;&#39; cfg.MODEL.ROI_HEADS.NUM_CLASSES = &#39;&lt;number of classes&gt;&#39; . All the model configs are available in cfg object. If we want to replicate the training later, we can save the cfg object and load it back to resume training. . Model Training (step 4) . We will use the DefaultTrainer for now. There are simple modules available which only accept the minimal parameters and make assumptions about lot of things. . The DefaultTrainer Module . builds the model | builds the optimizer | builds the dataloader | loads the model weights, and | register common hooks | . trainer = DefaultTrainer(cfg) trainer.resume_or_load(resume=False) trainer.train() . Now, we can train our Instance Detection model using Detectron2. We will try FasterRCNN-FPN-50 Model and see how it performs . 1. Install Detectron2 . !pip install -U torch==1.4+cu100 torchvision==0.5+cu100 -f https://download.pytorch.org/whl/torch_stable.html !pip install cython pyyaml==5.1 !pip install -U &#39;git+https://github.com/cocodataset/cocoapi.git#subdirectory=PythonAPI&#39; import torch, torchvision torch.__version__ !gcc --version # opencv is pre-installed on colab # install detectron2: !pip install detectron2 -f https://dl.fbaipublicfiles.com/detectron2/wheels/cu100/index.html . 2. Download the Dataset . We will create following directory structure . datasets/ Annotations/ JPEGImages/ train.txt . train.txt and test.txt have a filename(without extension) per row . !git clone https://github.com/CatalystCode/Handwriting !mv Handwriting/Data/labelledcontracttrainingdata/trainingjpg_output_99/ datasets !mv datasets/Annotations_99 datasets/Annotations !mv datasets/JPEGImages_99 datasets/JPEGImages !ls -l datasets/Annotations | awk &#39;{print $9}&#39; | sed &#39;s/ .[^.]*$//&#39; &gt; datasets/train.txt . 1. Prepare &amp; Visualize the Dataset . To visualize the labeled dataset in detectron2, we need to convert the xml annotations in the detectron2 dataset format as explained above. . We will use the custom function register_pascal_voc() which will convert the dataset into detectron2 format and register it with DatasetCatalog. . Visualizer Class . To draw the annotations on the images, we will use the Detectron2 Visualizer class which takes the image in rgb format, the metadata which has ordered label names and the scale parameter. . Visualizer.draw_instance_predictions() function to visualize prediction results Visualizer.draw_dataset_dict() function to draw the annotated dataset . Download the dataset . %matplotlib inline . import numpy as np import os import xml.etree.ElementTree as ET from detectron2.data import DatasetCatalog, MetadataCatalog from detectron2.structures import BoxMode from fvcore.common.file_io import PathManager import random import cv2 from detectron2.utils.visualizer import Visualizer from matplotlib.pyplot import figure from matplotlib import pyplot as plt def load_voc_instances(dirname, split, CLASS_NAMES): &quot;&quot;&quot; Load Pascal VOC detection annotations to Detectron2 format. Args: dirname: Contain &quot;Annotations&quot;, &quot;JPEGImages&quot; split (str): one of &quot;train&quot;, &quot;test&quot;, &quot;val&quot;, &quot;trainval&quot; &quot;&quot;&quot; with PathManager.open(os.path.join(dirname, split+&quot;.txt&quot;)) as f: fileids = np.loadtxt(f, dtype=np.str) dicts = [] for fileid in fileids: anno_file = os.path.join(dirname, &quot;Annotations&quot;, fileid + &quot;.xml&quot;) jpeg_file = os.path.join(dirname, &quot;JPEGImages&quot;, fileid + &quot;.jpg&quot;) tree = ET.parse(anno_file) r = { &quot;file_name&quot;: jpeg_file, &quot;image_id&quot;: fileid, &quot;height&quot;: int(tree.findall(&quot;./size/height&quot;)[0].text), &quot;width&quot;: int(tree.findall(&quot;./size/width&quot;)[0].text), } instances = [] for obj in tree.findall(&quot;object&quot;): cls = obj.find(&quot;name&quot;).text # We include &quot;difficult&quot; samples in training. # Based on limited experiments, they don&#39;t hurt accuracy. # difficult = int(obj.find(&quot;difficult&quot;).text) # if difficult == 1: # continue bbox = obj.find(&quot;bndbox&quot;) bbox = [float(bbox.find(x).text) for x in [&quot;xmin&quot;, &quot;ymin&quot;, &quot;xmax&quot;, &quot;ymax&quot;]] # Original annotations are integers in the range [1, W or H] # Assuming they mean 1-based pixel indices (inclusive), # a box with annotation (xmin=1, xmax=W) covers the whole image. # In coordinate space this is represented by (xmin=0, xmax=W) bbox[0] -= 1.0 bbox[1] -= 1.0 instances.append( {&quot;category_id&quot;: CLASS_NAMES.index(cls), &quot;bbox&quot;: bbox, &quot;bbox_mode&quot;: BoxMode.XYXY_ABS} ) r[&quot;annotations&quot;] = instances dicts.append(r) return dicts def visualize_dataset(datasetname, n_samples=10): dataset_dicts = DatasetCatalog.get(datasetname) metadata = MetadataCatalog.get(datasetname) for d in random.sample(dataset_dicts,n_samples): print(d[&#39;file_name&#39;]) img = cv2.imread(d[&quot;file_name&quot;]) visualizer = Visualizer(img[:, :, ::-1], metadata=metadata, scale=0.5) vis = visualizer.draw_dataset_dict(d) figure(num=None, figsize=(15, 15), dpi=100, facecolor=&#39;w&#39;, edgecolor=&#39;k&#39;) plt.axis(&quot;off&quot;) plt.imshow(vis.get_image()[:, :, ::-1]) plt.show() def register_pascal_voc(name, dirname, split, CLASS_NAMES): if name not in DatasetCatalog.list(): DatasetCatalog.register(name, lambda: load_voc_instances(dirname, split, CLASS_NAMES)) MetadataCatalog.get(name).set( thing_classes=CLASS_NAMES, split=split, dirname= dirname, year=2012 ) . #register pascal voc dataset in detectron2 register_pascal_voc(&#39;signature_dataset_train&#39;, dirname=&#39;datasets&#39;, split=&#39;train&#39;, CLASS_NAMES=[&quot;signature&quot;,&quot;others&quot;]) . visualize_dataset(&#39;signature_dataset_train&#39;,n_samples = 4) . datasets/JPEGImages/07653e58-24d1-4b3f-9b4a-76057efe5c09-3.jpg . datasets/JPEGImages/7674b81e-aa42-4891-856d-8938620d6fa0-1.jpg . datasets/JPEGImages/84cce561-1ee5-4201-9dfe-13da1711ca75-2.jpg . datasets/JPEGImages/9854ded9-3bd7-437c-83c4-b05d409c5872-2.jpg . 2. Model Training . from detectron2.engine import default_argument_parser from detectron2.engine import DefaultTrainer from detectron2.engine import default_setup from detectron2.config import get_cfg def setup_cfg(args): &quot;&quot;&quot; Create configs and perform basic setups. &quot;&quot;&quot; cfg = get_cfg() cfg.merge_from_file(args.config_file) cfg.merge_from_list(args.opts) cfg.freeze() default_setup(cfg, args) return cfg parser = default_argument_parser() args = parser.parse_args(&quot;--config-file sign_config/sign_faster_rcnn_R_50_FPN_3x.yaml OUTPUT_DIR sign_model &quot;.split()) . We have copied the config file for Faster RCNN R50 FPN from the model zoo as sign_faster_rcnn_R_50_FPN_3x.yaml and updated the configuration parameters. We have set the MODEL.ROI_HEADS(classes) to 2, Max Number of iterations to 4000, and training dataset name to the one we registered earlier. . config.setup_cfg function will load the configuration from the --config-file path, and will update the configration with other parameters passed as arguments . Here, we have passed the OUTPUT_DIR parameter to update the cfg.OUTPUT_DIR parameter value . cfg = setup_cfg(args) . Now that we have all the configurations, we can start training the model. . As I explained earlier, DefaultTrainer will build the model(without weights), optimizer, learning rate scheduler and then load weights from the checkpoint file specified in the cfg.MODEL.WEIGHTS parameter. . trainer = DefaultTrainer(cfg) trainer.resume_or_load(resume=False) trainer.train() . 3. Model Prediction . Now that the model has been trained and saved in the output directory. The config saved during the model training has all the parameters except model weight. We pass the model weight path as paramter to load the trained model weight. . The DefaultPredictor does image translation and takes only single image for prediction. But we can easily modify the DefaultPredictor class to accept batch of input images for prediction . from detectron2.engine import default_argument_parser from detectron2.engine import DefaultPredictor import config parser = default_argument_parser() args = parser.parse_args(&quot;--config-file sign_model/config.yaml MODEL.WEIGHTS sign_model/model_final.pth&quot;.split()) cfg = config.setup_cfg(args) predictor = DefaultPredictor(cfg) . import glob import time import os from matplotlib.pyplot import figure from matplotlib import pyplot as plt import cv2 from detectron2.utils.visualizer import Visualizer from detectron2.data import MetadataCatalog files = glob.glob(&quot;test_images/*.jpg&quot;) sample_size = 5 for file,_ in zip(files,range(sample_size)): im = cv2.imread(file) MetadataCatalog.get(&quot;signature_dataset_train&quot;).thing_classes = [&quot;signature&quot;,&quot;others&quot;] start_time = time.time() outputs = predictor(im) print(time.time()- start_time) v = Visualizer(im[:, :, ::-1], metadata=MetadataCatalog.get(&quot;signature_dataset_train&quot;), scale=0.5) v = v.draw_instance_predictions(outputs[&quot;instances&quot;].to(&quot;cpu&quot;)) print(file) figure(num=None, figsize=(15, 15), dpi=100, facecolor=&#39;w&#39;, edgecolor=&#39;k&#39;) plt.axis(&quot;off&quot;) plt.imshow(v.get_image()[:, :, ::-1]) plt.show() . 0.4223031997680664 test_images/image_11.jpg . 0.18352723121643066 test_images/0d0eddfc-731b-44de-b84d-d265afc7d996-1.jpg . 0.17967772483825684 test_images/07653e58-24d1-4b3f-9b4a-76057efe5c09-6.jpg . 0.14139199256896973 test_images/0d0eddfc-731b-44de-b84d-d265afc7d996-2.jpg . 0.15801262855529785 test_images/image_10.jpg . 4. Evaluate . The DefaultTrainer class doesn&#39;t have a evaluator method implemented. I have created a new Trainer class and added the build_evaluator method. We could have used this new Trainer class in the first step instead of DefaultTrainer but I wanted to show how easy it is to train the model without writing more code. . from detectron2.engine import default_argument_parser import config import trainer import dataset_utils dataset_utils.register_pascal_voc(&#39;signature_dataset_train&#39;, dirname=&#39;datasets&#39;, split=&#39;train&#39;, CLASS_NAMES=[&quot;signature&quot;,&quot;others&quot;]) #dataset_utils.register_pascal_voc(&#39;signature_dataset_test&#39;, dirname=&#39;datasets&#39;, split=&#39;test&#39;, CLASS_NAMES=[&quot;signature&quot;,&quot;others&quot;]) parser = default_argument_parser() args = parser.parse_args(&quot;--config-file sign_model/config.yaml MODEL.WEIGHTS sign_model/model_final.pth&quot;.split()) trainer.eval(args) . OrderedDict([(&#39;bbox&#39;, {&#39;AP&#39;: 69.67298193268152, &#39;AP50&#39;: 98.10585383880746, &#39;AP75&#39;: 88.13255308840152})]) . . Training on a Custom Dataset . Let us say we have got some more annotated dataset which is not in PASCAL VOC xml format. To train the above model, we have write a custom function get_dicts() which returns data in detectron2 format. . To improve the accuracy of handwriting detection, I found one more dataset which is of annotated french documents. The annotations are in json format for each image. The dataset is available in the following github repo https://github.com/hyperlex/Signature-detection-Practical-guide/tree/master/data/dataset. Download and save it in french_dataset directory . I have added all the functions in the library files dataset_utils.py and trainer.py. We will use these abstractions to quickly train and evaluate new models . import json import glob import os import cv2 from detectron2.structures import BoxMode def get_french_dicts(annot_dir): json_files = glob.glob(os.path.join(annot_dir,&#39;*.json&#39;)) dataset_dicts = [] for f in json_files: record={} img_ann = json.load(open(f)) filename = img_ann[&#39;asset&#39;][&#39;name&#39;] height, width = cv2.imread(os.path.join(annot_dir,&#39;..&#39;,filename)).shape[:2] record[&quot;file_name&quot;] = os.path.join(annot_dir,&#39;..&#39;,filename) record[&quot;image_id&quot;] = img_ann[&#39;asset&#39;][&#39;id&#39;] record[&quot;height&quot;] = height record[&quot;width&quot;] = width annos = img_ann[&quot;regions&quot;] objs =[] for ann in annos: px = ann[&#39;boundingBox&#39;][&#39;left&#39;] py = ann[&#39;boundingBox&#39;][&#39;top&#39;] px1 = ann[&#39;boundingBox&#39;][&#39;left&#39;] + ann[&#39;boundingBox&#39;][&#39;width&#39;] py1 = ann[&#39;boundingBox&#39;][&#39;top&#39;] + ann[&#39;boundingBox&#39;][&#39;height&#39;] obj = { &quot;bbox&quot;: [px, py, px1, py1], &quot;bbox_mode&quot;: BoxMode.XYXY_ABS, &quot;category_id&quot;: {&#39;signature&#39;:0,&#39;paraphe&#39;:1,&#39;date&#39;:1}[ann[&#39;tags&#39;][0]], &quot;iscrowd&quot;: 0 } objs.append(obj) record[&quot;annotations&quot;] = objs dataset_dicts.append(record) return dataset_dicts . from detectron2.utils.visualizer import Visualizer from detectron2.data import DatasetCatalog, MetadataCatalog import dataset_utils def get_img_dicts(): ann1 = dataset_utils.load_voc_instances(dirname = &#39;datasets&#39;, split = &#39;train&#39;, CLASS_NAMES=[&quot;signature&quot;,&quot;others&quot;]) ann2 = get_french_dicts(&#39;french_dataset/per_img_labels&#39;) return ann1 + ann2 dataset_name = &#39;signature_dataset_train&#39; DatasetCatalog.register(dataset_name, lambda: get_img_dicts()) MetadataCatalog.get(dataset_name).set(thing_classes=[&quot;signature&quot;,&quot;others&quot;], split=&#39;train&#39;, dirname= dirname, year=2012) . Metadata(name=&#39;signature_dataset_train&#39;, thing_classes=[&#39;signature&#39;, &#39;others&#39;]) . len(DatasetCatalog.get(dataset_name)) . 139 . dataset_utils.visualize_dataset(&#39;signature_dataset_train&#39;, n_samples=2) . datasets/JPEGImages/63348ad3-b0cc-45d0-bc85-bf2c865744ec-2.jpg . datasets/JPEGImages/4c85bb9b-1d8d-45b0-8f4a-664d77ee4b83-4.jpg . We can run the remaining steps as we did before for training the model and prediction . from detectron2.engine import default_argument_parser from detectron2.engine import DefaultTrainer import trainer parser = default_argument_parser() args = parser.parse_args(&quot;--config-file sign_config/chk_faster_rcnn_R_50_FPN_3x.yaml --num-gpus 3 OUTPUT_DIR french_sign_model SOLVER.MAX_ITER 4000&quot;.split()) trainer.train(args) . from detectron2.engine import default_argument_parser import config import trainer import dataset_utils import dataset_utils dataset_utils.register_pascal_voc(&#39;signature_dataset_test&#39;, dirname=&#39;datasets&#39;, split=&#39;train&#39;, CLASS_NAMES=[&quot;signature&quot;,&quot;others&quot;]) parser = default_argument_parser() args = parser.parse_args(&#39;--config-file french_sign_model/config.yaml MODEL.WEIGHTS french_sign_model/model_final.pth DATASETS.TEST (&quot;signature_dataset_test&quot;,)&#39;.split()) trainer.eval(args) . OrderedDict([(&#39;bbox&#39;, {&#39;AP&#39;: 67.82590895115814, &#39;AP50&#39;: 96.77629667360196, &#39;AP75&#39;: 84.18387912626437})]) . The Average Precision has reduced compared to the previous model. Let us check the prediction results. . from detectron2.engine import default_argument_parser from detectron2.engine import DefaultPredictor import config parser = default_argument_parser() args = parser.parse_args(&quot;--config-file french_sign_model/config.yaml MODEL.WEIGHTS french_sign_model/model_final.pth&quot;.split()) cfg = config.setup_cfg(args) predictor = DefaultPredictor(cfg) . import glob import time import os from matplotlib.pyplot import figure from matplotlib import pyplot as plt import cv2 from detectron2.utils.visualizer import Visualizer from detectron2.data import MetadataCatalog files = glob.glob(&quot;test_images/*.jpg&quot;) sample_size = 5 for file,_ in zip(files,range(sample_size)): im = cv2.imread(file) MetadataCatalog.get(&quot;signature_dataset_train&quot;).thing_classes = [&quot;signature&quot;,&quot;others&quot;] start_time = time.time() outputs = predictor(im) print(time.time()- start_time) v = Visualizer(im[:, :, ::-1], metadata=MetadataCatalog.get(&quot;signature_dataset_train&quot;), scale=0.5) v = v.draw_instance_predictions(outputs[&quot;instances&quot;].to(&quot;cpu&quot;)) print(file) figure(num=None, figsize=(15, 15), dpi=100, facecolor=&#39;w&#39;, edgecolor=&#39;k&#39;) plt.imshow(v.get_image()[:, :, ::-1]) plt.show() . 0.4847722053527832 test_images/image_11.jpg . 0.18241333961486816 test_images/0d0eddfc-731b-44de-b84d-d265afc7d996-1.jpg . 0.17200803756713867 test_images/07653e58-24d1-4b3f-9b4a-76057efe5c09-6.jpg . 0.18814849853515625 test_images/0d0eddfc-731b-44de-b84d-d265afc7d996-2.jpg . 0.19216012954711914 test_images/image_10.jpg .",
            "url": "http://forgetfulcrow.com/detectron2/fasterrcnn/vision/2020/04/09/Handwritten-Text-Detection-in-Detectron2.html",
            "relUrl": "/detectron2/fasterrcnn/vision/2020/04/09/Handwritten-Text-Detection-in-Detectron2.html",
            "date": " • Apr 9, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "Musing on the AI, Life and apparently Trivial matters. .",
          "url": "http://forgetfulcrow.com/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "http://forgetfulcrow.com/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}